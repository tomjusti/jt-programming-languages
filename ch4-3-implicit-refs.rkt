#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.5 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 2279 0 27 3 10 #"#lang eopl"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 59
#";;;;;;;;;;;;;;;; grammatical specification ;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 16 #"the-lexical-spec"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 20 3 1 #"'"
0 0 23 3 2 #"(("
0 0 14 3 10 #"whitespace"
0 0 23 3 2 #" ("
0 0 14 3 10 #"whitespace"
0 0 23 3 2 #") "
0 0 14 3 4 #"skip"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 7 #"comment"
0 0 23 3 2 #" ("
0 0 19 3 3 #"\"%\""
0 0 23 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 1 #" "
0 0 20 3 9 #"#\\newline"
0 0 23 3 4 #"))) "
0 0 14 3 4 #"skip"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"identifier"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 6 #"letter"
0 0 23 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 23 3 2 #" ("
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 14 3 6 #"letter"
0 0 23 3 1 #" "
0 0 14 3 5 #"digit"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"_\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"?\""
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 6 #"symbol"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 6 #"number"
0 0 23 3 2 #" ("
0 0 14 3 5 #"digit"
0 0 23 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 23 3 1 #" "
0 0 14 3 5 #"digit"
0 0 23 3 3 #")) "
0 0 14 3 6 #"number"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 6 #"number"
0 0 23 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 23 3 1 #" "
0 0 14 3 5 #"digit"
0 0 23 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 23 3 1 #" "
0 0 14 3 5 #"digit"
0 0 23 3 3 #")) "
0 0 14 3 6 #"number"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    ))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 11 #"the-grammar"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 20 3 1 #"'"
0 0 23 3 2 #"(("
0 0 14 3 7 #"program"
0 0 23 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 23 3 2 #") "
0 0 14 3 9 #"a-program"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 3 2 #" ("
0 0 14 3 6 #"number"
0 0 23 3 2 #") "
0 0 14 3 9 #"const-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 19 3 3 #"\"-\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 8 #"diff-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 19 3 3 #"\"+\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 7 #"add-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 19 3 3 #"\"*\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 8 #"mult-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 19 3 7 #"\"zero?\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 9 #"zero?-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 19 3 4 #"\"if\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"then\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 19 3 6 #"\"else\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 6 #"if-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 3 2 #" ("
0 0 14 3 10 #"identifier"
0 0 23 3 2 #") "
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 19 3 5 #"\"let\""
0 0 23 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 19 3 4 #"\"in\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 7 #"let-exp"
0 0 23 3 4 #")   "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 19 3 6 #"\"proc\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 23 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 8 #"proc-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 19 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 8 #"call-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 19 3 8 #"\"letrec\""
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 5 #"arbno"
0 0 23 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 23 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 23 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 19 3 4 #"\"in\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 10 #"letrec-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 19 3 7 #"\"begin\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 23 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 2 #") "
0 0 19 3 5 #"\"end\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 15 3 9 #"begin-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 19 3 5 #"\"set\""
0 0 23 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 10 #"assign-exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    ))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 52 #";;;;;;;;;;;;;;;; sllgen boilerplate ;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 28 #"sllgen:make-define-datatypes"
0 0 23 3 1 #" "
0 0 14 3 16 #"the-lexical-spec"
0 0 23 3 1 #" "
0 0 14 3 11 #"the-grammar"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 18 #"show-the-datatypes"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 28 #"sllgen:list-define-datatypes"
0 0 23 3 1 #" "
0 0 14 3 16 #"the-lexical-spec"
0 0 23 3 1 #" "
0 0 14 3 11 #"the-grammar"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 10 #"scan&parse"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 25 #"sllgen:make-string-parser"
0 0 23 3 1 #" "
0 0 14 3 16 #"the-lexical-spec"
0 0 23 3 1 #" "
0 0 14 3 11 #"the-grammar"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"just-scan"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 26 #"sllgen:make-string-scanner"
0 0 23 3 1 #" "
0 0 14 3 16 #"the-lexical-spec"
0 0 23 3 1 #" "
0 0 14 3 11 #"the-grammar"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 50 #";;;;;;;;;;;;;;;; expressed values ;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";;; an expressed value is either a number, a boolean, a procval, or "
 #"a"
) 0 0 23 29 1 #"\n"
0 0 17 3 15 #";;; reference. "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 23 3 1 #" "
0 0 14 3 6 #"expval"
0 0 23 3 1 #" "
0 0 14 3 7 #"expval?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"num-val"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 5 #"value"
0 0 23 3 1 #" "
0 0 14 3 7 #"number?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"bool-val"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 7 #"boolean"
0 0 23 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"proc-val"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"proc"
0 0 23 3 1 #" "
0 0 14 3 5 #"proc?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  )"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 15 #";;; extractors:"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 6 #"expval"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 7 #"num-val"
0 0 23 3 2 #" ("
0 0 14 3 3 #"num"
0 0 23 3 2 #") "
0 0 14 3 3 #"num"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 22 #"expval-extractor-error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"num"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"expval->bool"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 6 #"expval"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"bool-val"
0 0 23 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 23 3 2 #") "
0 0 14 3 4 #"bool"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 22 #"expval-extractor-error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"bool"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"expval->proc"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 6 #"expval"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"proc-val"
0 0 23 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 23 3 2 #") "
0 0 14 3 4 #"proc"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 22 #"expval-extractor-error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"proc"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 22 #"expval-extractor-error"
0 0 23 3 1 #" "
0 0 14 3 7 #"variant"
0 0 23 3 1 #" "
0 0 14 3 5 #"value"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"eopl:error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 17 #"expval-extractors"
0 0 23 3 1 #" "
0 0 19 3 28 #"\"Looking for a ~s, found ~s\""
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 14 3 7 #"variant"
0 0 23 3 1 #" "
0 0 14 3 5 #"value"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";;;;;;;;;;;;;;;; procedures ;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 23 3 1 #" "
0 0 14 3 4 #"proc"
0 0 23 3 1 #" "
0 0 14 3 5 #"proc?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"procedure"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"bvar"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 23 3 1 #" "
0 0 14 3 11 #"environment"
0 0 23 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 9 #"empty-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"extend-env"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"bvar"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"bval"
0 0 23 3 1 #" "
0 0 14 3 10 #"reference?"
0 0 23 3 18 #")                 "
0 0 17 3 23 #"; new for implicit-refs"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"saved-env"
0 0 23 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 15 #"extend-env-rec*"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"proc-names"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 6 #"b-vars"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 11 #"proc-bodies"
0 0 23 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 9 #"saved-env"
0 0 23 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";; env->list : Env -> List"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";; used for pretty-printing and debugging"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"env->list"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 11 #"environment"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 9 #"empty-env"
0 0 23 3 4 #" () "
0 0 20 3 1 #"'"
0 0 23 3 3 #"())"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"extend-env"
0 0 23 3 2 #" ("
0 0 14 3 3 #"sym"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 3 #"sym"
0 0 23 3 2 #" ("
0 0 14 3 17 #"expval->printable"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 9 #"env->list"
0 0 23 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 15 #"extend-env-rec*"
0 0 23 3 2 #" ("
0 0 14 3 7 #"p-names"
0 0 23 3 1 #" "
0 0 14 3 6 #"b-vars"
0 0 23 3 1 #" "
0 0 14 3 8 #"p-bodies"
0 0 23 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 4 #"cons"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 15 3 6 #"letrec"
0 0 23 3 1 #" "
0 0 14 3 7 #"p-names"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"..."
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 9 #"env->list"
0 0 23 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; expval->printable : ExpVal -> List"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";; returns a value like its argument, except procedures get cleaned"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; up with env->list "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"expval->printable"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 6 #"expval"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"proc-val"
0 0 23 3 2 #" ("
0 0 14 3 1 #"p"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 4 #"proc"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 9 #"procedure"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 28 #"                           ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"procedure"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"..."
0 0 23 3 2 #" ("
0 0 14 3 9 #"env->list"
0 0 23 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";;;;;;;;;;;;;;;; initial environment ;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 23 #";; init-env : () -> Env"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"init-env"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"extend-env"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 20 3 1 #"'"
0 0 14 3 1 #"i"
0 0 23 3 2 #" ("
0 0 14 3 6 #"newref"
0 0 23 3 2 #" ("
0 0 14 3 7 #"num-val"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 10 #"extend-env"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 20 3 1 #"'"
0 0 14 3 1 #"v"
0 0 23 3 2 #" ("
0 0 14 3 6 #"newref"
0 0 23 3 2 #" ("
0 0 14 3 7 #"num-val"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 10 #"extend-env"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 2 #" ("
0 0 14 3 6 #"newref"
0 0 23 3 2 #" ("
0 0 14 3 7 #"num-val"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 9 #"empty-env"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 72
(
 #";;;;;;;;;;;;;;;; environment constructors and observers ;;;;;;;;;;;;"
 #";;;;"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"apply-env"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 11 #"environment"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 9 #"empty-env"
0 0 23 3 3 #" ()"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 10 #"eopl:error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"apply-env"
0 0 23 3 1 #" "
0 0 19 3 19 #"\"No binding for ~s\""
0 0 23 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 10 #"extend-env"
0 0 23 3 2 #" ("
0 0 14 3 4 #"bvar"
0 0 23 3 1 #" "
0 0 14 3 4 #"bval"
0 0 23 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 1 23 65 1 #"\t"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 23 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 23 3 1 #" "
0 0 14 3 4 #"bvar"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 1 23 65 1 #"\t"
0 0 23 3 4 #"    "
0 0 14 3 4 #"bval"
0 0 23 29 1 #"\n"
0 1 23 65 1 #"\t"
0 0 23 3 5 #"    ("
0 0 14 3 9 #"apply-env"
0 0 23 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 23 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 15 #"extend-env-rec*"
0 0 23 3 2 #" ("
0 0 14 3 7 #"p-names"
0 0 23 3 1 #" "
0 0 14 3 6 #"b-vars"
0 0 23 3 1 #" "
0 0 14 3 8 #"p-bodies"
0 0 23 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 14 3 8 #"location"
0 0 23 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 23 3 1 #" "
0 0 14 3 7 #"p-names"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"            "
0 0 17 3 18 #";; n : (maybe int)"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 6 #"newref"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 8 #"proc-val"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 9 #"procedure"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 6 #"b-vars"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 8 #"p-bodies"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                    "
0 0 14 3 3 #"env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"apply-env"
0 0 23 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 23 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 23 3 7 #")))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 45 #";; location : Sym * Listof(Sym) -> Maybe(Int)"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";; (location sym syms) returns the location of sym in syms or #f is"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";; sym is not in syms.  We can specify this as follows:"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; if (memv sym syms)"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";;   then (list-ref syms (location sym syms)) = sym"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";;   else (location sym syms) = #f"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"location"
0 0 23 3 1 #" "
0 0 14 3 3 #"sym"
0 0 23 3 1 #" "
0 0 14 3 4 #"syms"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    (("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 4 #"syms"
0 0 23 3 2 #") "
0 0 20 3 2 #"#f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    (("
0 0 14 3 4 #"eqv?"
0 0 23 3 1 #" "
0 0 14 3 3 #"sym"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"syms"
0 0 23 3 3 #")) "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    (("
0 0 14 3 8 #"location"
0 0 23 3 1 #" "
0 0 14 3 3 #"sym"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"syms"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"     "
0 0 14 3 2 #"=>"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"n"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"else"
0 0 23 3 1 #" "
0 0 20 3 2 #"#f"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 58
#";;;;;;;;;;;;;;;; references and the store ;;;;;;;;;;;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 66
#";;; world's dumbest model of the store:  the store is a list and a"
0 0 23 29 1 #"\n"
0 0 17 3 61
#";;; reference is number which denotes a position in the list."
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";; the-store: a Scheme variable containing the current state of the"
0 0 23 29 1 #"\n"
0 0 17 3 45 #";; store.  Initially set to a dummy variable."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 13 #"uninitialized"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";; empty-store : () -> Sto"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"empty-store"
0 0 23 3 2 #") "
0 0 20 3 1 #"'"
0 0 23 3 3 #"())"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; initialize-store! : () -> Sto"
0 0 23 29 1 #"\n"
0 0 17 3 63
#";; usage: (initialize-store!) sets the-store to the empty-store"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"initialize-store!"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 2 #" ("
0 0 14 3 11 #"empty-store"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; get-store : () -> Sto"
0 0 23 29 1 #"\n"
0 0 17 3 57 #";; This is obsolete.  Replaced by get-store-as-list below"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"get-store"
0 0 23 3 2 #") "
0 0 14 3 9 #"the-store"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; reference? : SchemeVal -> Bool"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"reference?"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"integer?"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";; newref : ExpVal -> Ref"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"newref"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 8 #"next-ref"
0 0 23 3 2 #" ("
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 6 #"append"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 23 #")))                    "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 14 3 8 #"next-ref"
0 0 23 3 23 #"))                     "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";; deref : Ref -> ExpVal"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"deref"
0 0 23 3 1 #" "
0 0 14 3 3 #"ref"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 1 #" "
0 0 14 3 3 #"ref"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; setref! : Ref * ExpVal -> Unspecified"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"setref!"
0 0 23 3 1 #" "
0 0 14 3 3 #"ref"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 15 3 6 #"letrec"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"            (("
0 0 14 3 12 #"setref-inner"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 17 3 56 #";; returns a list like store1, except that position ref1"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 17 3 17 #";; contains val. "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 6 #"store1"
0 0 23 3 1 #" "
0 0 14 3 4 #"ref1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 15 3 4 #"cond"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                  (("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 6 #"store1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 24 #"report-invalid-reference"
0 0 23 3 1 #" "
0 0 14 3 3 #"ref"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                  (("
0 0 14 3 5 #"zero?"
0 0 23 3 1 #" "
0 0 14 3 4 #"ref1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 3 #"val"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"store1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 4 #"else"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 4 #"cons"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 6 #"store1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 12 #"setref-inner"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 6 #"store1"
0 0 23 3 3 #") ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"ref1"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 8 #"))))))))"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 12 #"setref-inner"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 1 #" "
0 0 14 3 3 #"ref"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 24 #"report-invalid-reference"
0 0 23 3 1 #" "
0 0 14 3 3 #"ref"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"eopl:error"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 6 #"setref"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 19 3 34 #"\"illegal reference ~s in store ~s\""
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 14 3 3 #"ref"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53 #";; get-store-as-list : () -> Listof(List(Ref,Expval))"
0 0 23 29 1 #"\n"
0 0 17 3 59
#";; Exports the current state of the store as a scheme list."
0 0 23 29 1 #"\n"
0 0 17 3 64
#";; (get-store-as-list '(foo bar baz)) = ((0 foo)(1 bar) (2 baz))"
0 0 23 29 1 #"\n"
0 0 17 3 41 #";;   where foo, bar, and baz are expvals."
0 0 23 29 1 #"\n"
0 0 17 3 66
#";; If the store were represented in a different way, this would be"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; replaced by something cleverer."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 17 #"get-store-as-list"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"letrec"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"      (("
0 0 14 3 10 #"inner-loop"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 17 3 51 #";; convert sto to list as if its car was location n"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"sto"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 3 #"sto"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 14 #"              "
0 0 20 3 1 #"'"
0 0 23 3 2 #"()"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"cons"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"sto"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 10 #"inner-loop"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 3 #"sto"
0 0 23 3 3 #") ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 7 #")))))))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"inner-loop"
0 0 23 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 16 #";;;; Interpreter"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 39 #";; value-of-program : Program -> ExpVal"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"value-of-program"
0 0 23 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 17 #"initialize-store!"
0 0 23 3 16 #")               "
0 0 17 3 24 #"; new for explicit refs."
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 7 #"program"
0 0 23 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 9 #"a-program"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"init-env"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";; value-of : Exp * Env -> ExpVal"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 10 #"expression"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 9 #"const-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"num"
0 0 23 3 3 #") ("
0 0 14 3 7 #"num-val"
0 0 23 3 1 #" "
0 0 14 3 3 #"num"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 7 #"var-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 3 #") ("
0 0 14 3 5 #"deref"
0 0 23 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"diff-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 4 #"val2"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"num1"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 4 #"num2"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 7 #"num-val"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 4 #"num1"
0 0 23 3 1 #" "
0 0 14 3 4 #"num2"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 7 #"add-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 4 #"val2"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"num1"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 4 #"num2"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 7 #"num-val"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 4 #"num1"
0 0 23 3 1 #" "
0 0 14 3 4 #"num2"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"mult-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 4 #"val2"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"num1"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 4 #"num2"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 7 #"num-val"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 4 #"num1"
0 0 23 3 1 #" "
0 0 14 3 4 #"num2"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 9 #"zero?-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"num1"
0 0 23 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 23 3 1 #" "
0 0 14 3 4 #"num1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 8 #"bool-val"
0 0 23 3 1 #" "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 8 #"bool-val"
0 0 23 3 1 #" "
0 0 20 3 2 #"#f"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 6 #"if-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp3"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 12 #"expval->bool"
0 0 23 3 1 #" "
0 0 14 3 4 #"val1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp3"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 7 #"let-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 8 #")       "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 2 #"v1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"extend-env"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 2 #" ("
0 0 14 3 6 #"newref"
0 0 23 3 1 #" "
0 0 14 3 2 #"v1"
0 0 23 3 2 #") "
0 0 14 3 3 #"env"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"proc-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 8 #"proc-val"
0 0 23 3 2 #" ("
0 0 14 3 9 #"procedure"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 8 #"call-exp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 4 #"rand"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 23 3 2 #" ("
0 0 14 3 12 #"expval->proc"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 3 #"arg"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"rand"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 15 #"apply-procedure"
0 0 23 3 1 #" "
0 0 14 3 4 #"proc"
0 0 23 3 1 #" "
0 0 14 3 3 #"arg"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"letrec-exp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"p-names"
0 0 23 3 1 #" "
0 0 14 3 6 #"b-vars"
0 0 23 3 1 #" "
0 0 14 3 8 #"p-bodies"
0 0 23 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 15 #"extend-env-rec*"
0 0 23 3 1 #" "
0 0 14 3 7 #"p-names"
0 0 23 3 1 #" "
0 0 14 3 6 #"b-vars"
0 0 23 3 1 #" "
0 0 14 3 8 #"p-bodies"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 9 #"begin-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 15 3 6 #"letrec"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                   (("
0 0 14 3 15 #"value-of-begins"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 23 3 1 #" "
0 0 14 3 2 #"es"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 2 #"v1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 2 #"e1"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 2 #"es"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 29 #"                             "
0 0 14 3 2 #"v1"
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                             ("
0 0 14 3 15 #"value-of-begins"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"es"
0 0 23 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 2 #"es"
0 0 23 3 7 #")))))))"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 15 #"value-of-begins"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 4 #"exps"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"assign-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 7 #"setref!"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 9 #"apply-env"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 7 #"num-val"
0 0 23 3 1 #" "
0 0 20 3 2 #"27"
0 0 23 3 4 #"))) "
0 0 17 3 30 #";; this is a don't care value."
0 0 23 29 1 #"\n"
0 0 23 3 6 #"    ))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 44 #";; apply-procedure : Proc * ExpVal -> ExpVal"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 15 #"apply-procedure"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 5 #"proc1"
0 0 23 3 1 #" "
0 0 14 3 3 #"arg"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 4 #"proc"
0 0 23 3 1 #" "
0 0 14 3 5 #"proc1"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 9 #"procedure"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 1 #"r"
0 0 23 3 2 #" ("
0 0 14 3 6 #"newref"
0 0 23 3 1 #" "
0 0 14 3 3 #"arg"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 7 #"new-env"
0 0 23 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 23 3 4 #"))) "
0 0 17 3 44 #"; call-by-value: a new location is allocated"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 8 #"value-of"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 23 3 9 #")))))))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; store->readable : Listof(List(Ref,Expval)) "
0 0 23 29 1 #"\n"
0 0 17 3 61
#";;                    -> Listof(List(Ref,Something-Readable))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"store->readable"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"p"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"     ("
0 0 14 3 4 #"cons"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 17 #"expval->printable"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 1 #"l"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";;; TOP LEVEL ;;;"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 26 #";; eval : String -> ExpVal"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 23 3 1 #" "
0 0 14 3 6 #"string"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 16 #"value-of-program"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 10 #"scan&parse"
0 0 23 3 1 #" "
0 0 14 3 6 #"string"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 7         913 4           0 0           0 151 0 17 3 12
#";;; EXAMPLES"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"eval"
0 0 23 3 1 #" "
0 0 19 3 27 #"\"if zero?(1) then 1 else 2\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"eval"
0 0 23 3 1 #" "
0 0 19 3 9 #"\"-(x, v)\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"eval"
0 0 23 3 1 #" "
0 0 19 3 33 #"\"if zero?(-(x, x)) then x else 2\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"eval"
0 0 23 3 1 #" "
0 0 19 3 33 #"\"if zero?(-(x, v)) then x else 2\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"eval"
0 0 23 3 1 #" "
0 0 19 3 42 #"\"let decr = proc (a) -(a, 1) in (decr 30)\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"eval"
0 0 23 3 1 #" "
0 0 19 3 37 #"\"( proc (g) (g 30) proc (y) -(y, 1))\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"eval"
0 0 23 3 1 #" "
0 0 19 3 13 #"\"let x = 200 "
0 0 19 29 1 #"\n"
0 0 19 3 37 #"         in let f = proc (z) -(z, x) "
0 0 19 29 1 #"\n"
0 0 19 3 29 #"              in let x = 100 "
0 0 19 29 1 #"\n"
0 0 19 3 47 #"                   in let g = proc (z) -(z, x) "
0 0 19 29 1 #"\n"
0 0 19 3 43 #"                        in -((f 1), (g 1))\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"eval"
0 0 23 3 1 #" "
0 0 19 3 13 #"\"let temp = 0"
0 0 19 29 1 #"\n"
0 0 19 3 20 #"       in  let x = 5"
0 0 19 29 1 #"\n"
0 0 19 3 38 #"           in  let mystery = proc (y) "
0 0 19 29 1 #"\n"
0 0 19 3 36 #"                               begin"
0 0 19 29 1 #"\n"
0 0 19 3 46 #"                                 set temp = x;"
0 0 19 29 1 #"\n"
0 0 19 3 43 #"                                 set x = y;"
0 0 19 29 1 #"\n"
0 0 19 3 46 #"                                 set y = temp;"
0 0 19 29 1 #"\n"
0 0 19 3 34 #"                                 x"
0 0 19 29 1 #"\n"
0 0 19 3 34 #"                               end"
0 0 19 29 1 #"\n"
0 0 19 3 31 #"               in (mystery 10)\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"eval"
0 0 23 3 1 #" "
0 0 19 3 62
#"\"letrec fact(n) = if zero?(n) then 1 else *(n, (fact -(n, 1)))"
0 0 19 29 1 #"\n"
0 0 19 3 19 #"       in (fact 5)\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"eval"
0 0 23 3 1 #" "
0 0 19 3 12 #"\"let res = 0"
0 0 19 29 1 #"\n"
0 0 19 3 38 #"       in letrec sum(n) = if zero?(n) "
0 0 19 29 1 #"\n"
0 0 19 3 35 #"                          then res "
0 0 19 29 1 #"\n"
0 0 19 3 30 #"                          else"
0 0 19 29 1 #"\n"
0 0 19 3 33 #"                            begin"
0 0 19 29 1 #"\n"
0 0 19 3 49 #"                             set res = +(res, n);"
0 0 19 29 1 #"\n"
0 0 19 3 42 #"                             (sum -(n, 1))"
0 0 19 29 1 #"\n"
0 0 19 3 31 #"                            end"
0 0 19 29 1 #"\n"
0 0 19 3 23 #"           in (sum 10)\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"eval"
0 0 23 3 1 #" "
0 0 19 3 10 #"\"let a = 3"
0 0 19 29 1 #"\n"
0 0 19 3 36 #"       in let p = proc (x) set x = 4"
0 0 19 29 1 #"\n"
0 0 19 3 19 #"          in begin "
0 0 19 29 1 #"\n"
0 0 19 3 22 #"               (p a); "
0 0 19 29 1 #"\n"
0 0 19 3 17 #"               a "
0 0 19 29 1 #"\n"
0 0 19 3 17 #"             end\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 4 #"eval"
0 0 23 3 1 #" "
0 0 19 3 10 #"\"let x = 0"
0 0 19 29 1 #"\n"
0 0 19 3 40 #"       in letrec f (x) = set x = +(x, 1)"
0 0 19 29 1 #"\n"
0 0 19 3 40 #"                 g (a) = set x = +(x, 2)"
0 0 19 29 1 #"\n"
0 0 19 3 18 #"          in begin"
0 0 19 29 1 #"\n"
0 0 19 3 21 #"               (f x);"
0 0 19 29 1 #"\n"
0 0 19 3 21 #"               (g x);"
0 0 19 29 1 #"\n"
0 0 19 3 16 #"               x"
0 0 19 29 1 #"\n"
0 0 19 3 17 #"             end\""
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0           0 0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0           0
